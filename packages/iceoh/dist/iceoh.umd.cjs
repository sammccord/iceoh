(function(o,c){typeof exports=="object"&&typeof module<"u"?c(exports):typeof define=="function"&&define.amd?define(["exports"],c):(o=typeof globalThis<"u"?globalThis:o||self,c(o.Iceoh={}))})(this,function(o){"use strict";var k=Object.defineProperty;var F=(o,c,x)=>c in o?k(o,c,{enumerable:!0,configurable:!0,writable:!0,value:x}):o[c]=x;var a=(o,c,x)=>(F(o,typeof c!="symbol"?c+"":c,x),x);const c=Math.atan(.5),x=Math.PI/6,C=Math.PI/4,M={x:0,y:0},T={x:.5,y:.5},P={x:1,y:1};var v=(r=>(r.NONE="NONE",r.N="N",r.NE="NE",r.E="E",r.SE="SE",r.S="S",r.SW="SW",r.W="W",r.NW="NW",r))(v||{});function j(r){const t=[];for(const e of Array.from(r.keys()).sort()){const i=r.get(e);for(const s of Array.from(i.keys()).sort()){const n=i.get(s);for(const h of Array.from(n.keys()).sort())t.push(n.get(h))}}return t}function y(r,t,e){let i=r;for(;t.length-1;){var s=t.shift();let n=i.get(s);if(n===void 0){const h=new Map;i.set(s,h),i=h}else i=n}return i.set(t[0],e),e}function w(r,t,e){for(var i=r;t.length;){var s=t.shift();let n=i.get(s);if(n===void 0){if(e&&!t.length)return i.set(s,e),e;if(e)n=new Map,i.set(s,n);else return}i=n}return i}function W(r,t){return w(r,[t.z||0,t.x,t.y])}function S(r,t){let e=r;for(;t.length-1;){var i=t.shift();let s=e.get(i);if(s===void 0)return!1;e=s}return e.delete(t[0])}function H(r,t){return Math.sqrt((t.x-r.x)*(t.x-r.x)+(t.y-r.y)*(t.y-r.y))}function _(r){return r.reduce((t,e)=>e?t+e:t,0)}const u=0;function B(r,t){let e=t.x-r.x,i=t.y-r.y;return e===u&&i<u?"N":e>u&&i<u?"NE":e>u&&i===u?"E":e>u&&i>u?"SE":e===u&&i>u?"S":e<u&&i>u?"SW":e<u&&i===u?"W":e<u&&i<u?"NW":"NONE"}class E{constructor({worldOrigin:t,baseTileOrigin:e,baseTileDimensions:i,getScreenDimensions:s,getWorldPosition:n,getWorldScale:h}={}){a(this,"getScreenDimensions");a(this,"getWorldPosition");a(this,"getWorldScale");a(this,"baseTileDimensions");a(this,"worldOrigin",T);a(this,"baseTileOrigin",T);a(this,"map",new Map);a(this,"bounds",{x:{min:0,max:0},y:{min:0,max:0},z:{min:0,max:0}});this.worldOrigin=t||T,this.baseTileOrigin=e||T,this.baseTileDimensions=i||{width:1,height:1},this.getScreenDimensions=s||(()=>({width:1,height:1})),this.getWorldPosition=n||(()=>M),this.getWorldScale=h||(()=>P)}add(t,e,i=this.baseTileDimensions,s=this.baseTileOrigin){return y(this.map,[e.z||0,e.x,e.y],t),this.recalculateBounds(e),this.toWorldPoint(e,i,s)}get(t){return W(this.map,t)}getColumn(t,e){const i=[];for(const[s,n]of e||this.map)i[s]=w(n,[t.x,t.y]);return i}move(t,e,i=this.baseTileDimensions,s=this.baseTileOrigin){const n=this.remove(t);return n?this.add(n,e,i,s):null}remove(t){t.z===void 0&&(t.z=0);const e=this.get(t);if(!!e)return S(this.map,[t.z||0,t.x,t.y]),this.recalculateBounds(t),e}toScreenPoint(t,e=this.baseTileDimensions,i=this.baseTileOrigin){const s=this.toWorldPoint(t,e,i),n=this.getWorldScale(),h=this.getWorldPosition();return s.x=s.x*n.x+h.x,s.y=s.y*n.y+h.y,s}toWorldPoint(t,e=this.baseTileDimensions,i=this.baseTileOrigin){return this._project(this._getAbsolutePosition(t),e,i)}worldToTile(t,e=this.baseTileDimensions,i=this.baseTileOrigin){const s=this._unproject(t);return{x:Math.round(s.x/e.width),y:Math.round(s.y/e.height),z:t.z||0}}centerToTile(t){return this.centerToPoint(this.toScreenPoint(t))}centerToPoint(t){const e=this.getScreenDimensions(),i=this.getWorldPosition();return{x:i.x+e.width/2-t.x,y:i.y+e.height/2-t.y}}get centerTile(){return this.getBounds()}center(){return this.centerToTile(this.centerTile)}getBounds(){const t={x:0,y:0,width:this.bounds.x.max-this.bounds.x.min,height:this.bounds.y.max-this.bounds.y.min,depth:this.bounds.z.max-this.bounds.z.min};return t.x=Math.round(this.bounds.x.min+t.width/2),t.y=Math.round(this.bounds.y.min+t.height/2),t}recalculateBounds(t){t.x<this.bounds.x.min&&(this.bounds.x.min=t.x),t.x>this.bounds.x.max&&(this.bounds.x.max=t.x),t.y<this.bounds.y.min&&(this.bounds.y.min=t.y),t.y>this.bounds.y.max&&(this.bounds.y.max=t.y),t.z!==void 0&&(t.z<this.bounds.z.min&&(this.bounds.z.min=t.z),t.z>this.bounds.z.max&&(this.bounds.z.max=t.z))}_project(t,e=this.baseTileDimensions,i=this.baseTileOrigin,s=0){const{width:n,height:h}=this.getScreenDimensions();return{x:t.x+n*this.worldOrigin.x,y:t.y+h*this.worldOrigin.y,z:t.z||0}}_unproject(t,e={x:0,y:0,z:0}){const{width:i,height:s}=this.getScreenDimensions();return e.x=t.x-i*this.worldOrigin.x,e.y=t.y-s*this.worldOrigin.y+(t.z||0),e.z=t.z||0,e}_getAbsolutePosition(t,e=this.baseTileDimensions,i=this.baseTileOrigin){return{x:e.width*t.x,y:e.height*t.y,z:t.z||0}}}class N extends E{constructor({angle:e=c,clamp:i=!0,...s}={angle:c,clamp:!0}){super({...s});a(this,"angle");a(this,"angleCos");a(this,"angleSin");a(this,"clamp");a(this,"baseOrigin");a(this,"baseSurfaceHeight");a(this,"baseSurfaceHalfHeight");a(this,"tileDimensions",new Map);this.angle=e,this.angleCos=Math.cos(this.angle),this.angleSin=Math.sin(this.angle),this.clamp=i,this.baseOrigin={x:this.baseTileDimensions.width*this.baseTileOrigin.x,y:this.baseTileDimensions.height*this.baseTileOrigin.y},this.baseSurfaceHeight=this.baseTileDimensions.height-this.baseTileDimensions.depth,this.baseSurfaceHalfHeight=this.baseSurfaceHeight/2}add(e,i,s=this.baseTileDimensions,n=this.baseTileOrigin){const h=this.toWorldPoint(i,s,n);if(s!==this.baseTileDimensions){let d=(s.depth||this.baseTileDimensions.depth)/this.baseTileDimensions.depth;for(let l=d,g=i.z||0;l>0;l--,g++)l>1?y(this.tileDimensions,[g,i.x,i.y],{...s,origin:n,depth:this.baseTileDimensions.depth,z:g,x:h.x,y:h.y,value:e}):y(this.tileDimensions,[g,i.x,i.y],{...s,origin:n,depth:this.baseTileDimensions.depth*l,z:g,x:h.x,y:h.y,value:e}),y(this.map,[g,i.x,i.y],i)}else y(this.tileDimensions,[i.z||0,i.x,i.y],{...s,origin:n,z:i.z||0,x:h.x,y:h.y,value:e}),y(this.map,[i.z||0,i.x,i.y],i);return this.recalculateBounds(i),h}remove(e){const i=this.get(e);if(!i)return null;for(const[s,n]of this.map)try{w(n,[e.x,e.y])===i&&(S(this.tileDimensions,[s,e.x,e.y]),S(this.map,[s,e.x,e.y]))}catch{}return this.recalculateBounds(e),i}worldToTile(e,i=this.baseTileDimensions,s=this.baseTileOrigin){const n=this._unproject(e),h={x:i.width*s.x,y:i.width*s.y};return n.x=Math.floor((n.x+h.x)/h.x),n.y=Math.floor((n.y+h.y)/h.y),n.z=n.z||0,n}toWorldPoint(e,i=this.baseTileDimensions,s=this.baseTileOrigin){return this._project(this._getAbsolutePosition(e),i,s,_(this.getDimensionsColumn(e).map(n=>(n==null?void 0:n.depth)||this.baseTileDimensions.depth).slice(1,e.z||0)))}getDimensionsColumn(e){return this.getColumn(e,this.tileDimensions)}castRay(e,i){const s=this.worldToTile(e);for(let n=this.bounds.z.max;n>=this.bounds.z.min;n--){const h=s.x+n,d=s.y+n;for(let l of this.getDimensionsColumn({x:h,y:d}).reverse()){if(!l)continue;const{x:g,y:z,value:f,origin:m,width:D,height:O,tile:b}=l;if(e.x>=g-D*m.x&&e.x<=g+D*m.x&&e.y>=z-O*m.y&&e.y<=z+O*m.y)if(i){if(i(f,b))return f}else return f}}}collisionMap(e,i){const s=new Map,n=this.worldToTile(e);for(let h=this.bounds.z.min;h<=this.bounds.z.max;h++){let d=!1;const l=n.x+h,g=n.y+h;for(let z of this.getDimensionsColumn({x:l,y:g})){if(!z)continue;const{x:f,y:m,value:D,z:O,origin:b,width:L,height:A,tile:Y}=z;if(e.x>=f-L*b.x&&e.x<=f+L*b.x&&e.y>=m-A*b.y&&e.y<=m+A*b.y){if(i&&!i(D,Y))continue;d=!0,y(s,[O,l,g],D)}else if(d)break}}return s}_project(e,i=this.baseTileDimensions,s=this.baseTileOrigin,n=0){const{width:h,height:d}=this.getScreenDimensions(),l={x:(e.x-e.y)*this.angleCos+h*this.worldOrigin.x,y:(e.x+e.y)*this.angleSin+d*this.worldOrigin.y,z:(e.x+e.y)*(e.z+1||1)};return i!==this.baseTileDimensions?(l.y-=this.baseSurfaceHalfHeight+0-this.baseTileOrigin.y,l.y+=i.height*s.y-(i.height-(i.height-i.depth)/2),l.y-=n):l.y-=this.baseTileDimensions.depth*e.z,this.clamp&&(l.x=~~(l.x+(l.x>0?.5:-.5)),l.y=~~(l.y+(l.y>0?.5:-.5))),l}_unproject(e,i={x:0,y:0,z:0}){const s=this.getScreenDimensions(),n=e.x-s.width*this.worldOrigin.x,h=e.y-s.height*this.worldOrigin.y;return i.x=n/(2*this.angleCos)+h/(2*this.angleSin),i.y=-(n/(2*this.angleCos))+h/(2*this.angleSin),i.z=e.z||0,i}_getAbsolutePosition(e,i=this.baseTileDimensions,s=this.baseTileOrigin){return{x:i.width*s.x*e.x,y:i.height*s.y*e.y,z:e.z||0}}}o.CLASSIC=c,o.DIRECTION=v,o.FULL=P,o.ISOMETRIC=x,o.IsoTilemap=N,o.MIDDLE=T,o.MILITARY=C,o.TOP_LEFT=M,o.Tilemap=E,o.collectRay=j,o.get=w,o.getDirection=B,o.getDistance=H,o.pointGet=W,o.remove=S,o.set=y,o.sum=_,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
