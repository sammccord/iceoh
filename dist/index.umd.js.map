{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/Tilemap.ts","../src/IsoTilemap.ts"],"sourcesContent":["import { IPoint, IPoint3 } from \"./interfaces\"\n\n/**\n * Classic 2:1 projection angle found in most isometric games\n * \n * @type {number}\n */\nexport const CLASSIC = Math.atan(0.5);\n/**\n * Isometric projection\n *\n * @type {number}\n */\nexport const ISOMETRIC = Math.PI / 6;\n/**\n * Military projection\n * \n * @type {number}\n */\nexport const MILITARY = Math.PI / 4;\n\n/**\n * Point specifying top left placement factor\n * \n * @type {IPoint}\n */\nexport const TOP_LEFT: IPoint = { x: 0, y: 0 }\n\n/**\n * Point specifying middle placement factor\n * \n * @type {IPoint}\n */\nexport const MIDDLE: IPoint = { x: 0.5, y: 0.5 }\n\n/**\n * Point specifying a factor of 1 for both axes\n * \n * @type {IPoint}\n */\nexport const FULL: IPoint = { x: 1, y: 1 }\n\n/**\n * Enum specifying compass directions, including NONE\n * \n * @type {DIRECTION}\n */\nexport enum DIRECTION {\n  NONE = 'NONE',\n  N = 'N',\n  NE = 'NE',\n  E = 'E',\n  SE = 'SE',\n  S = 'S',\n  SW = 'SW',\n  W = 'W',\n  NW = 'NW'\n}\n\n/**\n * Deeply set a value in object at given indices using objects for new path creation\n *\n * @param {object} obj - Object to deeply set\n * @param {number[]} indices - Array of keys to set\n * @param {any} value - The value to set\n * @return {any} The value set\n *\n * @example\n *\n *    const tile = set({}, [0, 1, 2], sprite)\n */\nexport function set<T>(obj: {}, indices: number[], value: T): T {\n  var o = obj\n  while (indices.length - 1) {\n    var n = indices.shift()\n    if (!(n in o)) o[n] = {}\n    o = o[n]\n  }\n  o[indices[0]] = value\n  return o[indices[0]]\n}\n\n/**\n * Deeply get a value from an object at given indicies path.\n * If `setIfNull` is provided, new objects will be used for path creation and the value will be set.\n *\n * @param {object} obj - Object to deeply get\n * @param {number[]} indices - Array of keys to get\n * @param {any} [setIfNull] - The value to set, if any\n * @return {any} The value at given indices\n *\n * @example\n *\n *    const tile = get({}, [0, 1, 2], sprite)\n */\nexport function get<T>(obj: {}, indices: number[], setIfNull?: T): T {\n  var o = obj\n  while (indices.length) {\n    var n = indices.shift()\n    if (!(n in o)) {\n      if (setIfNull) {\n        o[n] = {}\n        if (!indices.length) o[n] = setIfNull\n      }\n      else return\n    }\n    o = o[n]\n  }\n  return o as T\n}\n\n/**\n * Gets distance between two 2D Points\n *\n * @param {IPoint} from\n * @param {IPoint} to\n * @return {number} Distance\n *\n * @example\n *\n *    const tile = getDistance({ x: 5, y: 5 }, { x: 10, y: 10 })\n */\nexport function getDistance(from: IPoint, to: IPoint): number {\n  return Math.sqrt((to.x - from.x) * (to.x - from.x) + (to.y - from.y) * (to.y - from.y));\n}\n\n/**\n * Sums an array of numbers, ignoring null values\n *\n * @param {number[]} numbers\n * @return {number} sum\n *\n * @example\n *\n *    const total = sum([ 1, 10, null, 5 ])\n */\nexport function sum(numbers: number[]): number {\n  return numbers.reduce((s, n) => !!n ? s + n : s, 0)\n}\n\nconst ZERO = 0\n/**\n * Gets compass direction between two points\n *\n * @param {IPoint} from\n * @param {IPoint} to\n * @return {DIRECTION}\n *\n * @example\n *\n *    const direction = getDirection({ x: 1, y: 1 }, { x: 1: y: 0 }) // DIRECTION.N\n */\nexport function getDirection(from: IPoint3, to: IPoint3): DIRECTION {\n  let diffX = to.x - from.x, diffY = to.y - from.y\n  if (diffX === ZERO && diffY < ZERO) return DIRECTION.N\n  if (diffX > ZERO && diffY < ZERO) return DIRECTION.NE\n  if (diffX > ZERO && diffY === ZERO) return DIRECTION.E\n  if (diffX > ZERO && diffY > ZERO) return DIRECTION.SE\n  if (diffX === ZERO && diffY > ZERO) return DIRECTION.S\n  if (diffX < ZERO && diffY > ZERO) return DIRECTION.SW\n  if (diffX < ZERO && diffY === ZERO) return DIRECTION.W\n  if (diffX < ZERO && diffY < ZERO) return DIRECTION.NW\n  return DIRECTION.NONE\n}\n","import { IPoint3, IPoint, IRectangle, IRectangle3, IBox } from './interfaces'\nimport { get, set, MIDDLE, FULL, TOP_LEFT } from './utils'\n\n/**\n * Tilemap configuration\n */\nexport interface ITilemapConfig {\n  /** The screen offset for the 0,0 coordinate, deaults to `MIDDLE` */\n  worldOrigin?: IPoint\n  /** The anchor point at which tiles are expected to be drawn to screen, defaults to `MIDDLE` */\n  baseTileOrigin?: IPoint\n  /**\n   * The base dimensions of tiles that comprise the map.\n   * In 2D Tilemaps this would ideally be squares, `{ x: 32, y: 32 }`.\n   * Isometric tilemaps expect a depth field to correctly place tiles at z > 0\n   */\n  baseTileDimensions: IRectangle3\n  /** A getter function that retuns the dimensions of the canvas */\n  getGlobalDimensions: () => IRectangle\n  /** A getter function that returns the world offset, this defaults to `() => { x: 0, y: 0 }` */\n  getWorldPosition?: () => IPoint\n  /** A getter function that returns the world scale, this defaults to `() => { x: 1, y: 1 }` */\n  getWorldScale?: () => IPoint\n}\n\nexport class Tilemap<T> {\n  protected getGlobalDimensions: () => IRectangle\n  protected getWorldPosition: () => IPoint\n  protected getWorldScale: () => IPoint\n  protected baseTileDimensions: IRectangle3\n\n  protected readonly worldOrigin: IPoint = MIDDLE\n  protected readonly baseTileOrigin: IPoint = MIDDLE\n  protected readonly tiles: T[] = []\n  protected readonly map: { [z: number]: { [x: number]: { [y: number]: T } } } = {}\n\n  /**\n  * Create a `Tilemap<T>` instance.\n  * @param {ITilemapConfig} config\n  */\n  constructor({ worldOrigin, baseTileOrigin, baseTileDimensions, getGlobalDimensions, getWorldPosition, getWorldScale }: ITilemapConfig) {\n    this.worldOrigin = worldOrigin || MIDDLE\n    this.baseTileOrigin = baseTileOrigin || MIDDLE\n    this.baseTileDimensions = baseTileDimensions\n    this.getGlobalDimensions = getGlobalDimensions\n    this.getWorldPosition = getWorldPosition || (() => TOP_LEFT)\n    this.getWorldScale = getWorldScale || (() => FULL)\n  }\n\n  /**\n  * Add tile to the tilemap at given coordinate.\n  * @param {T} tile\n  * @param {IPoint3} point - The map coordinates at which to store this tile\n  * @param {IRectangle3=} dimensions - The dimensions of the tile tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile\n  * @return {IPoint3} A point at which to place this tile in screen space\n  *\n  * @example\n  *\n  *    const position = isoTilemap.add({}, { x: 1, y: 1, z: 0 })\n  */\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    set(this.map, [point.z, point.x, point.y], tile)\n    return this._project(this._getAbsolutePosition(point), dimensions, origin)\n  }\n\n  /**\n * Get a tile at given map coordinates\n *\n * @param {IPoint3} point - Tile to get at given coordinates. If no z is provided, it defaults to 0.\n * @return {T} The tile at given coordinates\n *\n * @example\n *\n *    const tile = tilemap.get({ x: 1, y: 1, z: 1 })\n */\n  public get(point: IPoint3): T {\n    return get(this.map, [point.z || 0, point.x, point.y])\n  }\n\n  /**\n  * Get an array of values from a map at given x,y coordinates.\n  *\n  * @param {IPoint} point - Map coordinates to get at each z-layer\n  * @param {object=} map - Object to search against, defaults to `this.map`, but will also work if called with `this.depthMap`, in which case numerical tile depths are returned.\n  * @return {T[]} Array of values at given x,y coordinates. If the map is multiple z-layers deep, but the tile x,y coordinate doesn't exist in all layers, the returned array will contain null entries.\n  *\n  * @example\n  *\n  *    const tiles = tilemap.getColumn({ x: 1, y: 1 })\n  *    const depths = tilemap.getColumn({ x: 1, y: ! }, tilemap.depthMap)\n  */\n  public getColumn<C>(point: IPoint, map?: {}): C[] {\n    return Object.entries(map || this.map).map(([_, grid]) => get(grid, [point.x, point.y]))\n  }\n\n  /**\n  * Moves a tile from given coordinate to another coordinate\n  * @param {IPoint3} from - The map coordinates of the tile to move\n  * @param {IPoint3} to - The map coordinates to move the tile to\n  * @param {IRectangle3=} dimensions - The dimensions of the tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile, defaults to `this.baseTileOrigin`\n  * @return {IPoint3} A point at which to place this tile in screen space\n  *\n  * @example\n  *\n  *    const position = tilemap.move({ x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 0 })\n  */\n  public move(from: IPoint3, to: IPoint3, dimensions: IRectangle = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const tile = this.remove(from)\n    if (!tile) return null\n    return this.add(tile, to, dimensions, origin)\n  }\n\n  /**\n  * Remove a tile from the given point coordinates.\n  *\n  * @param {IPoint3} point - Map coordinates to remove\n  * @return {[T]} The removed tile if found\n  *\n  * @example\n  *\n  *    const tile = tilemap.remove({ x: 1, y: 1 })\n  */\n  public remove(point: IPoint3): T {\n    const tile = this.get(point)\n    if (!tile) return null\n    delete this.map[point.z][point.x][point.y]\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  /**\n  * Project a tile coordinate to screen space coordinate\n  * @param {IPoint3} point - The tile coordinates\n  * @param {IRectangle3=} dimensions - The dimensions of the tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile, defaults to `this.baseTileOrigin`\n  * @return {IPoint3} Screen space point\n  *\n  * @example\n  *\n  *    const position = tilemap.toPoint({ x: 1, y: 1, z: 0 })\n  */\n  public toPoint(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const scale = this.getWorldScale()\n    const worldPosition = this.getWorldPosition()\n    const p = this._project(this._getAbsolutePosition(point, dimensions, origin))\n    p.x += p.x * (scale.x - 1) + worldPosition.x\n    p.y += p.y * (scale.y - 1) + worldPosition.y\n    return p\n  }\n\n  /**\n  * Project a screen point to tile point\n  * @param {IPoint3} point - The screen coordinates to project\n  * @param {IRectangle3=} dimensions - The dimensions of each tile on the map, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile\n  * @return {IPoint3} The tile coordinate in the map\n  *\n  * @example\n  *\n  *    const tilePosition = tileMap.toTile({ x: 400, y: 300 })\n  */\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    return {\n      x: Math.round(p.x / dimensions.width),\n      y: Math.round(p.y / dimensions.height),\n      z: point.z || 0\n    }\n  }\n\n  /**\n  * Returns the new position of the tiles' parent container where the given tile is in the center of the viewport.\n  * @param {IPoint3} point - The map coordinates to center\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const worldPosition = tilemap.centerToTile({ x: 1, y: 1, z: 0 })\n  */\n  public centerToTile(point: IPoint3): IPoint {\n    return this.centerToPoint(this.toPoint(point))\n  }\n\n  /**\n  * Returns the new position of the tiles' parent container where the given screen point is in the center of the viewport.\n  * @param {IPoint3} point - The screen coordinates to center\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const worldPosition = tilemap.centerToPoint({ x: 500, y: 200 })\n  */\n  public centerToPoint(point: IPoint): IPoint {\n    const globalDimensions = this.getGlobalDimensions()\n    const worldPosition = this.getWorldPosition()\n    return {\n      x: worldPosition.x + (globalDimensions.width / 2) - point.x,\n      y: worldPosition.y + (globalDimensions.height / 2) - point.y\n    }\n  }\n\n  /**\n  * Calculates the current map bounds and returns the tile coordinates in the center\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const { x, y } = tilemap.centerTile\n  */\n  public get centerTile(): IPoint {\n    return this.getBounds()\n  }\n\n  /**\n  * Calls `tilemap.centerToTile(this.centerTile)` and returns the new position of the tiles' parent container where the center tile is in the center of the viewport.\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const { x, y } = tilemap.center()\n  */\n  public center(): IPoint {\n    return this.centerToTile(this.centerTile)\n  }\n\n  /**\n  * Calculates the map bounds of the current tilemap.\n  * @return {IBox}\n  *\n  * @example\n  *\n  *    const { x, y, width, height, depth } = tilemap.getBounds()\n  */\n  public getBounds(): IBox {\n    const grids = Object.values(this.map)\n    const xes = grids.map(o => Object.keys(o).map(Number)).flat()\n    const yes = grids.map(Object.values).flat().map(o => Object.keys(o).map(Number)).flat()\n\n    const minX = Math.min(...xes), maxX = Math.max(...xes), minY = Math.min(...yes), maxY = Math.max(...yes)\n\n    const rect = {\n      x: 0,\n      y: 0,\n      width: maxX - minY,\n      height: maxY - minY,\n      depth: grids.length\n    }\n\n    rect.x = Math.round(minX + (rect.width / 2))\n    rect.y = Math.round(minY + (rect.height / 2))\n\n    return rect\n  }\n\n  protected _project(point3: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const { width, height } = this.getGlobalDimensions();\n    return {\n      x: point3.x + (width * this.worldOrigin.x),\n      y: point3.y + (height * this.worldOrigin.y),\n      z: point3.z || 0\n    };\n  }\n\n  protected _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const { width, height } = this.getGlobalDimensions()\n    out.x = point.x - (width * this.worldOrigin.x);\n    out.y = point.y - (height * this.worldOrigin.y) + (point.z || 0);\n    out.z = point.z\n    return out;\n  }\n\n  protected _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: this.baseTileDimensions.width * point.x,\n      y: this.baseTileDimensions.height * point.y,\n      z: point.z\n    }\n  }\n}","import { IPoint3, IPoint, IRectangle3 } from './interfaces'\nimport { set, sum, CLASSIC } from './utils'\nimport { Tilemap, ITilemapConfig } from './Tilemap'\n\n/**\n * Object extending `ITilemapConfig` with optional projectionAngle, defaulting to `CLASSIC`\n */\nexport interface IIsoTilemapConfig extends ITilemapConfig {\n  /** Isometric projection angle, defaults to `CLASSIC` */\n  projectionAngle?: number\n}\n\n/**\n * Class that extends basic 2D Tilemap functionality based on given projectionAngle.\n * @param {T} - The type of sprite object to store\n * @extends Tilemap\n */\nexport class IsoTilemap<T> extends Tilemap<T> {\n\n  protected readonly transform: [number, number] = null\n  protected readonly baseOrigin: IPoint\n  protected readonly baseSurfaceHeight: number\n  protected readonly baseSurfaceHalfHeight: number\n  readonly depthMap: { [z: number]: { [x: number]: { [y: number]: number } } } = {}\n\n  /**\n  * Create an `IsoTilemap<T>` instance.\n  * @param {IIsoTilemapConfig} config - projectionAngle will default to CLASSIC\n  */\n  constructor({ projectionAngle = CLASSIC, ...config }: IIsoTilemapConfig) {\n    super({ ...config })\n    this.transform = [Math.cos(projectionAngle), Math.sin(projectionAngle)];\n    this.baseOrigin = { x: this.baseTileDimensions.width * this.baseTileOrigin.x, y: this.baseTileDimensions.height * this.baseTileOrigin.y }\n    this.baseSurfaceHeight = (this.baseTileDimensions.height - this.baseTileDimensions.depth)\n    this.baseSurfaceHalfHeight = this.baseSurfaceHeight / 2\n  }\n\n  /**\n  * Add tile to the tilemap at given coordinate.\n  * If given tile is tall enough to occupy multiple z-layers at the base tile depth, it will add a reference at those z-layers in the map.\n  * @param {T} tile\n  * @param {IPoint3} point - The map coordinates at which to store this tile\n  * @param {IRectangle3=} dimensions - The dimensions of the tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile, defaults to `this.baseTileOrigin`\n  * @return {IPoint3} A 3D Point at which to place this tile in screen space\n  *\n  * @example\n  *\n  *    const position = isoTilemap.add({}, { x: 1, y: 1, z: 0 })\n  */\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    if (dimensions !== this.baseTileDimensions) {\n      let d = dimensions.depth / this.baseTileDimensions.depth\n      for (let i = d, z = point.z; i > 0; i--, z++) {\n        if (i > 1) {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth)\n        } else {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth * i)\n        }\n        set(this.map, [z, point.x, point.y], tile)\n      }\n    } else {\n      set(this.depthMap, [point.z, point.x, point.y], this.baseTileDimensions.depth)\n      set(this.map, [point.z, point.x, point.y], tile)\n    }\n    return this._project(\n      this._getAbsolutePosition(point),\n      dimensions,\n      origin,\n      sum(this.getColumn<number>(point, this.depthMap).slice(1, point.z))\n    )\n  }\n\n  /**\n  * Remove a tile from the given point coordinates.\n  * If the tile exists at multiple z-layers, it'll remove references to the tile at those layers as well.\n  * @param {IPoint3} point - The map coordinates from which to remove a tile\n  * @return {[T]} The tile that existed at the given point, or null if there was no tile.\n  *\n  * @example\n  *\n  *    const removedTile = isoTilemap.remove({ x: 1, y: 1, z: 0 })\n  */\n  public remove(point: IPoint3): T {\n    const tile = this.get(point)\n    if (!tile) return null\n    Object.entries(this.map).forEach(([z, grid]) => {\n      try {\n        if (grid[point.x][point.y] === tile) {\n          delete this.depthMap[z][point.x][point.y]\n          delete this.map[z][point.x][point.y]\n        }\n      } catch { }\n    })\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  /**\n  * Project a screen point to tile point\n  * @param {IPoint3} point - The screen coordinates to project\n  * @param {IRectangle3=} dimensions - The dimensions of each tile on the map, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile\n  * @return {IPoint3} The tile coordinate in the map\n  *\n  * @example\n  *\n  *    const tilePosition = isoTilemap.toTile({ x: 400, y: 300 })\n  */\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    const edge = { x: dimensions.width * origin.x, y: dimensions.width * origin.y }\n    p.x = Math.floor((p.x + edge.x) / edge.x)\n    p.y = Math.floor((p.y + edge.y) / edge.y)\n    p.z = p.z || 0\n    return p\n  }\n\n  protected _project(point3: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin, depth: number = 0): IPoint3 {\n    const out = {\n      x: (point3.x - point3.y) * this.transform[0],\n      y: (point3.x + point3.y) * this.transform[1],\n      z: point3.z || 0\n    }\n\n    const { width, height } = this.getGlobalDimensions()\n    out.x += width * this.worldOrigin.x\n    out.y += + height * this.worldOrigin.y\n    out.z = (point3.x + point3.y) * (point3.z + 1 || 1)\n\n    if (dimensions !== this.baseTileDimensions) {\n      out.y -= (this.baseSurfaceHalfHeight + 0) - this.baseTileOrigin.y // + (this.baseTileDimensions.depth * point3.z)) - this.baseTileOrigin.y\n      out.y += (dimensions.height * origin.y) - (dimensions.height - ((dimensions.height - dimensions.depth) / 2))\n      out.y -= depth\n    } else {\n      out.y -= (this.baseTileDimensions.depth * point3.z)\n    }\n\n    return out;\n  }\n\n  protected _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const worldDimensions = this.getGlobalDimensions()\n    const x = point.x - (worldDimensions.width * this.worldOrigin.x);\n    const y = point.y - (worldDimensions.height * this.worldOrigin.y);\n\n    out.x = x / (2 * this.transform[0]) + y / (2 * this.transform[1]);\n    out.y = -(x / (2 * this.transform[0])) + y / (2 * this.transform[1]);\n    out.z = point.z || 0;\n\n    return out;\n  }\n\n  protected _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: (dimensions.width * origin.x) * point.x,\n      y: (dimensions.width * origin.y) * point.y,\n      z: point.z || 0\n    }\n  }\n}"],"names":["DIRECTION","CLASSIC","Math","atan","ISOMETRIC","PI","MILITARY","TOP_LEFT","x","y","MIDDLE","FULL","set","obj","indices","value","o","length","n","shift","get","setIfNull","sum","numbers","reduce","s","Tilemap","worldOrigin","baseTileOrigin","baseTileDimensions","getGlobalDimensions","getWorldPosition","getWorldScale","this","add","sprite","point","dimensions","origin","tiles","push","tile","indexOf","map","z","_project","_getAbsolutePosition","getColumn","Object","entries","move","from","to","remove","splice","toPoint","scale","worldPosition","p","toTile","_unproject","round","width","height","centerToTile","centerToPoint","globalDimensions","center","centerTile","getBounds","grids","values","xes","keys","Number","flat","yes","minX","min","maxX","max","minY","rect","depth","point3","out","IsoTilemap","projectionAngle","config","_this","transform","cos","sin","baseOrigin","baseSurfaceHeight","baseSurfaceHalfHeight","i","depthMap","slice","forEach","grid","_this2","edge","floor","worldDimensions","diffX","diffY","N","NE","E","SE","S","SW","W","NW","NONE","sqrt"],"mappings":"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"}