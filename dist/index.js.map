{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/Tilemap.ts","../src/IsoTilemap.ts"],"sourcesContent":["import { IPoint, IPoint3 } from \"./interfaces\"\n\n//  Projection angles\nexport const CLASSIC = Math.atan(0.5);\nexport const ISOMETRIC = Math.PI / 6;\nexport const MILITARY = Math.PI / 4;\n\nexport const TOP_LEFT: IPoint = { x: 0, y: 0 }\nexport const MIDDLE: IPoint = { x: 0.5, y: 0.5 }\nexport const ZERO = 0\n\nexport enum DIRECTION {\n  NONE = 'NONE',\n  N = 'N',\n  NE = 'NE',\n  E = 'E',\n  SE = 'SE',\n  S = 'S',\n  SW = 'SW',\n  W = 'W',\n  NW = 'NW'\n}\n\nexport function set<T>(obj: {}, indices: number[], value: T): T {\n  var o = obj\n  while (indices.length - 1) {\n    var n = indices.shift()\n    if (!(n in o)) o[n] = {}\n    o = o[n]\n  }\n  o[indices[0]] = value\n  return o[indices[0]]\n}\n\nexport function get<T>(obj: {}, indices: number[], setIfNull?: T): T {\n  var o = obj\n  while (indices.length) {\n    var n = indices.shift()\n    if (!(n in o)) {\n      if (setIfNull) {\n        o[n] = {}\n        if (!indices.length) o[n] = setIfNull\n      }\n      else return\n    }\n    o = o[n]\n  }\n  return o as T\n}\n\nexport function getDistance(p1: IPoint, p2: IPoint) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n}\n\nexport function sum(numbers: number[]): number {\n  return numbers.reduce((s, n) => !!n ? s + n : s, 0)\n}\n\nexport function getIsoDirection(from: IPoint3, to: IPoint3): DIRECTION {\n  let diffX = to.x - from.x, diffY = to.y - from.y\n  if (diffX === ZERO && diffY < ZERO) return DIRECTION.N\n  if (diffX > ZERO && diffY < ZERO) return DIRECTION.NE\n  if (diffX > ZERO && diffY === ZERO) return DIRECTION.E\n  if (diffX > ZERO && diffY > ZERO) return DIRECTION.SE\n  if (diffX === ZERO && diffY > ZERO) return DIRECTION.S\n  if (diffX < ZERO && diffY > ZERO) return DIRECTION.SW\n  if (diffX < ZERO && diffY === ZERO) return DIRECTION.W\n  if (diffX < ZERO && diffY < ZERO) return DIRECTION.NW\n  return DIRECTION.NONE\n}\n","import { IPoint3, IPoint, IRectangle, IRectangle3 } from './interfaces'\nimport { get, set, sum, MIDDLE } from './utils'\n\nexport interface ITilemapConfig {\n  worldOrigin?: IPoint\n  baseTileOrigin?: IPoint\n  baseTileDimensions: IRectangle3\n  getGlobalDimensions: () => IRectangle\n  getWorldPosition: () => IPoint\n  getWorldScale: () => IPoint\n}\n\nexport class Tilemap<T> {\n  protected getGlobalDimensions: () => IRectangle\n  protected getWorldPosition: () => IPoint\n  protected getWorldScale: () => IPoint\n  protected baseTileDimensions: IRectangle3\n\n  protected readonly worldOrigin: IPoint = MIDDLE\n  protected readonly baseTileOrigin: IPoint = MIDDLE\n  protected readonly tiles: T[] = []\n  protected readonly map: { [layer: number]: { [row: number]: { [col: number]: T } } } = {}\n\n  constructor({ worldOrigin, baseTileOrigin, baseTileDimensions, getGlobalDimensions, getWorldPosition, getWorldScale }: ITilemapConfig) {\n    this.worldOrigin = worldOrigin || MIDDLE\n    this.baseTileOrigin = baseTileOrigin || MIDDLE\n    this.baseTileDimensions = baseTileDimensions\n    this.getGlobalDimensions = getGlobalDimensions\n    this.getWorldPosition = getWorldPosition\n    this.getWorldScale = getWorldScale\n  }\n\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    set(this.map, [point.z, point.x, point.y], tile)\n    return this._project(this._getAbsolutePosition(point), dimensions, origin)\n  }\n\n  public get(point: IPoint3): T {\n    return get(this.map, [point.z || 0, point.x, point.y])\n  }\n\n  public getColumn<C>(point: IPoint3, map?: {}): C[] {\n    return Object.entries(map || this.map).map(([_, grid]) => get(grid, [point.x, point.y]))\n  }\n\n  public move(from: IPoint3, to: IPoint3, dimensions: IRectangle = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const tile = this.remove(from)\n    if (!tile) return null\n    return this.add(tile, to, dimensions, origin)\n  }\n\n  public remove(point: IPoint3) {\n    const tile = this.get(point)\n    if (!tile) return null\n    delete this.map[point.z][point.x][point.y] // TODO delete all now empty objects after moving\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  public toPoint(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const scale = this.getWorldScale()\n    const worldPosition = this.getWorldPosition()\n    const p = this._project(this._getAbsolutePosition(point, dimensions, origin))\n    p.x += p.x * (scale.x - 1) + worldPosition.x\n    p.y += p.y * (scale.y - 1) + worldPosition.y\n    return p\n  }\n\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    return {\n      x: Math.round(p.x / dimensions.width),\n      y: Math.round(p.y / dimensions.height),\n      z: point.z || 0\n    }\n  }\n\n  public centerToTile(point: IPoint): IPoint {\n    return this.centerToPoint(this.toPoint(point))\n  }\n\n  public centerToPoint(point: IPoint): IPoint {\n    const globalDimensions = this.getGlobalDimensions()\n    const worldPosition = this.getWorldPosition()\n    return {\n      x: worldPosition.x + (globalDimensions.width / 2) - point.x,\n      y: worldPosition.y + (globalDimensions.height / 2) - point.y\n    }\n  }\n\n  public get centerTile(): IPoint {\n    return this.getBounds()\n  }\n\n  public center(): IPoint {\n    return this.centerToTile(this.centerTile)\n  }\n\n  public getBounds(): IPoint & IRectangle3 {\n    const grids = Object.values(this.map)\n    const xes = grids.map(o => Object.keys(o).map(Number)).flat()\n    const yes = grids.map(Object.values).flat().map(o => Object.keys(o).map(Number)).flat()\n\n    const minX = Math.min(...xes), maxX = Math.max(...xes), minY = Math.min(...yes), maxY = Math.max(...yes)\n\n    const rect = {\n      x: 0,\n      y: 0,\n      width: maxX - minY,\n      height: maxY - minY,\n      depth: grids.length\n    }\n\n    rect.x = Math.round(minX + (rect.width / 2))\n    rect.y = Math.round(minY + (rect.height / 2))\n\n    return rect\n  }\n\n  _project(point3: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const { width, height } = this.getGlobalDimensions();\n    return {\n      x: point3.x + (width * this.worldOrigin.x),\n      y: point3.y + (height * this.worldOrigin.y),\n      z: point3.z || 0\n    };\n  }\n\n  _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const { width, height } = this.getGlobalDimensions()\n    out.x = point.x - (width * this.worldOrigin.x);\n    out.y = point.y - (height * this.worldOrigin.y) + (point.z || 0);\n    out.z = point.z\n    return out;\n  }\n\n  _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: this.baseTileDimensions.width * point.x,\n      y: this.baseTileDimensions.height * point.y,\n      z: point.z\n    }\n  }\n}","import { IPoint3, IPoint, IRectangle, IRectangle3 } from './interfaces'\nimport { get, set, sum, CLASSIC, MIDDLE } from './utils'\nimport { Tilemap, ITilemapConfig } from './Tilemap'\n\nexport interface IIsoTilemapConfig {\n  projectionAngle?: number\n}\n\nexport class IsoTilemap<T> extends Tilemap<T> {\n\n  protected readonly transform: [number, number] = null\n  protected readonly baseOrigin: IPoint\n  protected readonly baseSurfaceHeight: number\n  protected readonly baseSurfaceHalfHeight: number\n  readonly depthMap: { [layer: number]: { [row: number]: { [col: number]: number } } } = {}\n\n  constructor({ projectionAngle = CLASSIC, ...config }: IIsoTilemapConfig & ITilemapConfig) {\n    super({ ...config })\n    this.transform = [Math.cos(projectionAngle), Math.sin(projectionAngle)];\n    this.baseOrigin = { x: this.baseTileDimensions.width * this.baseTileOrigin.x, y: this.baseTileDimensions.height * this.baseTileOrigin.y }\n    this.baseSurfaceHeight = (this.baseTileDimensions.height - this.baseTileDimensions.depth)\n    this.baseSurfaceHalfHeight = this.baseSurfaceHeight / 2\n  }\n\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    if (dimensions !== this.baseTileDimensions) {\n      let d = dimensions.depth / this.baseTileDimensions.depth\n      for (let i = d, z = point.z; i > 0; i--, z++) {\n        if (i > 1) {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth)\n        } else {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth * i)\n        }\n        set(this.map, [z, point.x, point.y], tile)\n      }\n    } else {\n      set(this.depthMap, [point.z, point.x, point.y], this.baseTileDimensions.depth)\n      set(this.map, [point.z, point.x, point.y], tile)\n    }\n    return this._project(\n      this._getAbsolutePosition(point),\n      dimensions,\n      origin,\n      sum(this.getColumn<number>(point, this.depthMap).slice(1, point.z))\n    )\n  }\n\n  public remove(point: IPoint3): T {\n    const tile = this.get(point)\n    if (!tile) return null\n    Object.entries(this.map).forEach(([z, grid]) => {\n      try {\n        if (grid[point.x][point.y] === tile) {\n          delete this.depthMap[z][point.x][point.y]\n          delete this.map[z][point.x][point.y]\n        }\n      } catch { }\n    })\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    const edge = { x: dimensions.width * origin.x, y: dimensions.width * origin.y }\n    p.x = Math.floor((p.x + edge.x) / edge.x)\n    p.y = Math.floor((p.y + edge.y) / edge.y)\n    p.z = p.z || 0\n    return p\n  }\n\n  _project(point3: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin, depth: number = 0): IPoint3 {\n    const out = {\n      x: (point3.x - point3.y) * this.transform[0],\n      y: (point3.x + point3.y) * this.transform[1],\n      z: point3.z || 0\n    }\n\n    const { width, height } = this.getGlobalDimensions()\n    out.x += width * this.worldOrigin.x\n    out.y += + height * this.worldOrigin.y\n    out.z = (point3.x + point3.y) * (point3.z + 1 || 1)\n\n    if (dimensions !== this.baseTileDimensions) {\n      out.y -= (this.baseSurfaceHalfHeight + 0) - this.baseTileOrigin.y // + (this.baseTileDimensions.depth * point3.z)) - this.baseTileOrigin.y\n      out.y += (dimensions.height * origin.y) - (dimensions.height - ((dimensions.height - dimensions.depth) / 2))\n      out.y -= depth\n    } else {\n      out.y -= (this.baseTileDimensions.depth * point3.z)\n    }\n\n    return out;\n  }\n\n  _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const worldDimensions = this.getGlobalDimensions()\n    const x = point.x - (worldDimensions.width * this.worldOrigin.x);\n    const y = point.y - (worldDimensions.height * this.worldOrigin.y);\n\n    out.x = x / (2 * this.transform[0]) + y / (2 * this.transform[1]);\n    out.y = -(x / (2 * this.transform[0])) + y / (2 * this.transform[1]);\n    out.z = point.z || 0;\n\n    return out;\n  }\n\n  _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: (dimensions.width * origin.x) * point.x, // multiply by scale\n      y: (dimensions.width * origin.y) * point.y,\n      z: point.z || 0\n    }\n  }\n}"],"names":["CLASSIC","DIRECTION","Math","atan","ISOMETRIC","PI","MILITARY","MIDDLE","x","y","set","obj","indices","value","o","length","n","shift","get","setIfNull","sum","numbers","reduce","s","Tilemap","worldOrigin","baseTileOrigin","baseTileDimensions","getGlobalDimensions","getWorldPosition","getWorldScale","this","add","sprite","point","dimensions","origin","tiles","push","tile","indexOf","map","z","_project","_getAbsolutePosition","getColumn","Object","entries","move","from","to","remove","splice","toPoint","scale","worldPosition","p","toTile","_unproject","round","width","height","centerToTile","centerToPoint","globalDimensions","center","centerTile","getBounds","grids","values","xes","keys","Number","flat","yes","minX","min","maxX","max","minY","rect","depth","point3","out","IsoTilemap","projectionAngle","config","_this","transform","cos","sin","baseOrigin","baseSurfaceHeight","baseSurfaceHalfHeight","i","depthMap","slice","forEach","grid","_this2","edge","floor","worldDimensions","p1","p2","sqrt","diffX","diffY","N","NE","E","SE","S","SW","W","NW","NONE"],"mappings":"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"}