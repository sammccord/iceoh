const i=Math.atan(.5),t=Math.PI/6,e=Math.PI/4,s={x:0,y:0},n={x:.5,y:.5},h={x:1,y:1};var o;function r(i,t,e){for(var s=i;t.length-1;){var n=t.shift();n in s||(s[n]={}),s=s[n]}return s[t[0]]=e,s[t[0]]}function l(i,t,e){for(var s=i;t.length;){var n=t.shift();if(!(n in s)){if(!e)return;s[n]={},t.length||(s[n]=e)}s=s[n]}return s}function a(i,t){return Math.sqrt((t.x-i.x)*(t.x-i.x)+(t.y-i.y)*(t.y-i.y))}function g(i){return i.reduce((i,t)=>t?i+t:i,0)}function d(i,t){let e=t.x-i.x,s=t.y-i.y;return 0===e&&s<0?o.N:e>0&&s<0?o.NE:e>0&&0===s?o.E:e>0&&s>0?o.SE:0===e&&s>0?o.S:e<0&&s>0?o.SW:e<0&&0===s?o.W:e<0&&s<0?o.NW:o.NONE}!function(i){i.NONE="NONE",i.N="N",i.NE="NE",i.E="E",i.SE="SE",i.S="S",i.SW="SW",i.W="W",i.NW="NW"}(o||(o={}));class c{constructor({worldOrigin:i,baseTileOrigin:t,baseTileDimensions:e,getGlobalDimensions:o,getWorldPosition:r,getWorldScale:l}){this.getGlobalDimensions=void 0,this.getWorldPosition=void 0,this.getWorldScale=void 0,this.baseTileDimensions=void 0,this.worldOrigin=n,this.baseTileOrigin=n,this.tiles=[],this.map={},this.worldOrigin=i||n,this.baseTileOrigin=t||n,this.baseTileDimensions=e,this.getGlobalDimensions=o,this.getWorldPosition=r||(()=>s),this.getWorldScale=l||(()=>h)}add(i,t,e=this.baseTileDimensions,s=this.baseTileOrigin){this.tiles.push(i);const n=this.tiles[this.tiles.indexOf(i)];return r(this.map,[t.z,t.x,t.y],n),this._project(this._getAbsolutePosition(t),e,s)}get(i){return l(this.map,[i.z||0,i.x,i.y])}getColumn(i,t){return Object.entries(t||this.map).map(([t,e])=>l(e,[i.x,i.y]))}move(i,t,e=this.baseTileDimensions,s=this.baseTileOrigin){const n=this.remove(i);return n?this.add(n,t,e,s):null}remove(i){const t=this.get(i);return t?(delete this.map[i.z][i.x][i.y],this.tiles.splice(this.tiles.indexOf(t),1)[0]):null}toPoint(i,t=this.baseTileDimensions,e=this.baseTileOrigin){const s=this.getWorldScale(),n=this.getWorldPosition(),h=this._project(this._getAbsolutePosition(i,t,e));return h.x+=h.x*(s.x-1)+n.x,h.y+=h.y*(s.y-1)+n.y,h}toTile(i,t=this.baseTileDimensions,e=this.baseTileOrigin){const s=this._unproject(i);return{x:Math.round(s.x/t.width),y:Math.round(s.y/t.height),z:i.z||0}}centerToTile(i){return this.centerToPoint(this.toPoint(i))}centerToPoint(i){const t=this.getGlobalDimensions(),e=this.getWorldPosition();return{x:e.x+t.width/2-i.x,y:e.y+t.height/2-i.y}}get centerTile(){return this.getBounds()}center(){return this.centerToTile(this.centerTile)}getBounds(){const i=Object.values(this.map),t=i.map(i=>Object.keys(i).map(Number)).flat(),e=i.map(Object.values).flat().map(i=>Object.keys(i).map(Number)).flat(),s=Math.min(...t),n=Math.max(...t),h=Math.min(...e),o={x:0,y:0,width:n-h,height:Math.max(...e)-h,depth:i.length};return o.x=Math.round(s+o.width/2),o.y=Math.round(h+o.height/2),o}_project(i,t=this.baseTileDimensions,e=this.baseTileOrigin){const{width:s,height:n}=this.getGlobalDimensions();return{x:i.x+s*this.worldOrigin.x,y:i.y+n*this.worldOrigin.y,z:i.z||0}}_unproject(i,t={x:0,y:0,z:0}){const{width:e,height:s}=this.getGlobalDimensions();return t.x=i.x-e*this.worldOrigin.x,t.y=i.y-s*this.worldOrigin.y+(i.z||0),t.z=i.z,t}_getAbsolutePosition(i,t=this.baseTileDimensions,e=this.baseTileOrigin){return{x:this.baseTileDimensions.width*i.x,y:this.baseTileDimensions.height*i.y,z:i.z}}}function u(){return u=Object.assign||function(i){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(i[s]=e[s])}return i},u.apply(this,arguments)}const b=["angle","clamp"];class y extends c{constructor(t){let{angle:e=i,clamp:s=!0}=t;super(u({},function(i,t){if(null==i)return{};var e,s,n={},h=Object.keys(i);for(s=0;s<h.length;s++)t.indexOf(e=h[s])>=0||(n[e]=i[e]);return n}(t,b))),this.angle=void 0,this.angleCos=void 0,this.angleSin=void 0,this.clamp=void 0,this.baseOrigin=void 0,this.baseSurfaceHeight=void 0,this.baseSurfaceHalfHeight=void 0,this.depthMap={},this.angle=e,this.angleCos=Math.cos(this.angle),this.angleSin=Math.sin(this.angle),this.clamp=s,this.baseOrigin={x:this.baseTileDimensions.width*this.baseTileOrigin.x,y:this.baseTileDimensions.height*this.baseTileOrigin.y},this.baseSurfaceHeight=this.baseTileDimensions.height-this.baseTileDimensions.depth,this.baseSurfaceHalfHeight=this.baseSurfaceHeight/2}add(i,t,e=this.baseTileDimensions,s=this.baseTileOrigin){this.tiles.push(i);const n=this.tiles[this.tiles.indexOf(i)];if(e!==this.baseTileDimensions)for(let i=e.depth/this.baseTileDimensions.depth,s=t.z;i>0;i--,s++)r(this.depthMap,[s,t.x,t.y],i>1?this.baseTileDimensions.depth:this.baseTileDimensions.depth*i),r(this.map,[s,t.x,t.y],n);else r(this.depthMap,[t.z,t.x,t.y],this.baseTileDimensions.depth),r(this.map,[t.z,t.x,t.y],n);return this._project(this._getAbsolutePosition(t),e,s,g(this.getColumn(t,this.depthMap).slice(1,t.z)))}remove(i){const t=this.get(i);return t?(Object.entries(this.map).forEach(([e,s])=>{try{s[i.x][i.y]===t&&(delete this.depthMap[e][i.x][i.y],delete this.map[e][i.x][i.y])}catch(i){}}),this.tiles.splice(this.tiles.indexOf(t),1)[0]):null}toTile(i,t=this.baseTileDimensions,e=this.baseTileOrigin){const s=this._unproject(i),n=t.width*e.x,h=t.width*e.y;return s.x=Math.floor((s.x+n)/n),s.y=Math.floor((s.y+h)/h),s.z=s.z||0,s}_project(i,t=this.baseTileDimensions,e=this.baseTileOrigin,s=0){const{width:n,height:h}=this.getGlobalDimensions(),o={x:(i.x-i.y)*this.angleCos+n*this.worldOrigin.x,y:(i.x+i.y)*this.angleSin+h*this.worldOrigin.y,z:(i.x+i.y)*(i.z+1||1)};return t!==this.baseTileDimensions?(o.y-=this.baseSurfaceHalfHeight+0-this.baseTileOrigin.y,o.y+=t.height*e.y-(t.height-(t.height-t.depth)/2),o.y-=s):o.y-=this.baseTileDimensions.depth*i.z,this.clamp&&(o.x=~~(o.x+(o.x>0?.5:-.5)),o.y=~~(o.y+(o.y>0?.5:-.5))),o}_unproject(i,t={x:0,y:0,z:0}){const e=this.getGlobalDimensions(),s=i.x-e.width*this.worldOrigin.x,n=i.y-e.height*this.worldOrigin.y;return t.x=s/(2*this.angleCos)+n/(2*this.angleSin),t.y=-s/(2*this.angleCos)+n/(2*this.angleSin),t.z=i.z||0,t}_getAbsolutePosition(i,t=this.baseTileDimensions,e=this.baseTileOrigin){return{x:t.width*e.x*i.x,y:t.width*e.y*i.y,z:i.z||0}}}export{i as CLASSIC,o as DIRECTION,h as FULL,t as ISOMETRIC,y as IsoTilemap,n as MIDDLE,e as MILITARY,s as TOP_LEFT,c as Tilemap,l as get,d as getDirection,a as getDistance,r as set,g as sum};
//# sourceMappingURL=index.modern.js.map
