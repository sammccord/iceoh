{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/Tilemap.ts","../src/IsoTilemap.ts"],"sourcesContent":["import { IPoint, IPoint3 } from \"./interfaces\"\n\n//  Projection angles\nexport const CLASSIC = Math.atan(0.5);\nexport const ISOMETRIC = Math.PI / 6;\nexport const MILITARY = Math.PI / 4;\n\nexport const TOP_LEFT: IPoint = { x: 0, y: 0 }\nexport const MIDDLE: IPoint = { x: 0.5, y: 0.5 }\nexport const ZERO = 0\n\nexport enum DIRECTION {\n  NONE = 'NONE',\n  N = 'N',\n  NE = 'NE',\n  E = 'E',\n  SE = 'SE',\n  S = 'S',\n  SW = 'SW',\n  W = 'W',\n  NW = 'NW'\n}\n\nexport function set<T>(obj: {}, indices: number[], value: T): T {\n  var o = obj\n  while (indices.length - 1) {\n    var n = indices.shift()\n    if (!(n in o)) o[n] = {}\n    o = o[n]\n  }\n  o[indices[0]] = value\n  return o[indices[0]]\n}\n\nexport function get<T>(obj: {}, indices: number[], setIfNull?: T): T {\n  var o = obj\n  while (indices.length) {\n    var n = indices.shift()\n    if (!(n in o)) {\n      if (setIfNull) {\n        o[n] = {}\n        if (!indices.length) o[n] = setIfNull\n      }\n      else return\n    }\n    o = o[n]\n  }\n  return o as T\n}\n\nexport function getDistance(p1: IPoint, p2: IPoint) {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n}\n\nexport function sum(numbers: number[]): number {\n  return numbers.reduce((s, n) => !!n ? s + n : s, 0)\n}\n\nexport function getIsoDirection(from: IPoint3, to: IPoint3): DIRECTION {\n  let diffX = to.x - from.x, diffY = to.y - from.y\n  if (diffX === ZERO && diffY < ZERO) return DIRECTION.N\n  if (diffX > ZERO && diffY < ZERO) return DIRECTION.NE\n  if (diffX > ZERO && diffY === ZERO) return DIRECTION.E\n  if (diffX > ZERO && diffY > ZERO) return DIRECTION.SE\n  if (diffX === ZERO && diffY > ZERO) return DIRECTION.S\n  if (diffX < ZERO && diffY > ZERO) return DIRECTION.SW\n  if (diffX < ZERO && diffY === ZERO) return DIRECTION.W\n  if (diffX < ZERO && diffY < ZERO) return DIRECTION.NW\n  return DIRECTION.NONE\n}\n","import { IPoint3, IPoint, IRectangle, IRectangle3 } from './interfaces'\nimport { get, set, sum, MIDDLE } from './utils'\n\nexport interface ITilemapConfig {\n  worldOrigin?: IPoint\n  baseTileOrigin?: IPoint\n  baseTileDimensions: IRectangle3\n  getGlobalDimensions: () => IRectangle\n  getWorldPosition: () => IPoint\n  getWorldScale: () => IPoint\n}\n\nexport class Tilemap<T> {\n  protected getGlobalDimensions: () => IRectangle\n  protected getWorldPosition: () => IPoint\n  protected getWorldScale: () => IPoint\n  protected baseTileDimensions: IRectangle3\n\n  protected readonly worldOrigin: IPoint = MIDDLE\n  protected readonly baseTileOrigin: IPoint = MIDDLE\n  protected readonly tiles: T[] = []\n  protected readonly map: { [layer: number]: { [row: number]: { [col: number]: T } } } = {}\n\n  constructor({ worldOrigin, baseTileOrigin, baseTileDimensions, getGlobalDimensions, getWorldPosition, getWorldScale }: ITilemapConfig) {\n    this.worldOrigin = worldOrigin || MIDDLE\n    this.baseTileOrigin = baseTileOrigin || MIDDLE\n    this.baseTileDimensions = baseTileDimensions\n    this.getGlobalDimensions = getGlobalDimensions\n    this.getWorldPosition = getWorldPosition\n    this.getWorldScale = getWorldScale\n  }\n\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    set(this.map, [point.z, point.x, point.y], tile)\n    return this._project(this._getAbsolutePosition(point), dimensions, origin)\n  }\n\n  public get(point: IPoint3): T {\n    return get(this.map, [point.z || 0, point.x, point.y])\n  }\n\n  public getColumn<C>(point: IPoint3, map?: {}): C[] {\n    return Object.entries(map || this.map).map(([_, grid]) => get(grid, [point.x, point.y]))\n  }\n\n  public move(from: IPoint3, to: IPoint3, dimensions: IRectangle = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const tile = this.remove(from)\n    if (!tile) return null\n    return this.add(tile, to, dimensions, origin)\n  }\n\n  public remove(point: IPoint3) {\n    const tile = this.get(point)\n    if (!tile) return null\n    delete this.map[point.z][point.x][point.y] // TODO delete all now empty objects after moving\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  public toPoint(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const scale = this.getWorldScale()\n    const worldPosition = this.getWorldPosition()\n    const p = this._project(this._getAbsolutePosition(point, dimensions, origin))\n    p.x += p.x * (scale.x - 1) + worldPosition.x\n    p.y += p.y * (scale.y - 1) + worldPosition.y\n    return p\n  }\n\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    return {\n      x: Math.round(p.x / dimensions.width),\n      y: Math.round(p.y / dimensions.height),\n      z: point.z || 0\n    }\n  }\n\n  public centerToTile(point: IPoint): IPoint {\n    return this.centerToPoint(this.toPoint(point))\n  }\n\n  public centerToPoint(point: IPoint): IPoint {\n    const globalDimensions = this.getGlobalDimensions()\n    const worldPosition = this.getWorldPosition()\n    return {\n      x: worldPosition.x + (globalDimensions.width / 2) - point.x,\n      y: worldPosition.y + (globalDimensions.height / 2) - point.y\n    }\n  }\n\n  public get centerTile(): IPoint {\n    return this.getBounds()\n  }\n\n  public center(): IPoint {\n    return this.centerToTile(this.centerTile)\n  }\n\n  public getBounds(): IPoint & IRectangle3 {\n    const grids = Object.values(this.map)\n    const xes = grids.map(o => Object.keys(o).map(Number)).flat()\n    const yes = grids.map(Object.values).flat().map(o => Object.keys(o).map(Number)).flat()\n\n    const minX = Math.min(...xes), maxX = Math.max(...xes), minY = Math.min(...yes), maxY = Math.max(...yes)\n\n    const rect = {\n      x: 0,\n      y: 0,\n      width: maxX - minY,\n      height: maxY - minY,\n      depth: grids.length\n    }\n\n    rect.x = Math.round(minX + (rect.width / 2))\n    rect.y = Math.round(minY + (rect.height / 2))\n\n    return rect\n  }\n\n  _project(point3: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const { width, height } = this.getGlobalDimensions();\n    return {\n      x: point3.x + (width * this.worldOrigin.x),\n      y: point3.y + (height * this.worldOrigin.y),\n      z: point3.z || 0\n    };\n  }\n\n  _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const { width, height } = this.getGlobalDimensions()\n    out.x = point.x - (width * this.worldOrigin.x);\n    out.y = point.y - (height * this.worldOrigin.y) + (point.z || 0);\n    out.z = point.z\n    return out;\n  }\n\n  _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: this.baseTileDimensions.width * point.x,\n      y: this.baseTileDimensions.height * point.y,\n      z: point.z\n    }\n  }\n}","import { IPoint3, IPoint, IRectangle, IRectangle3 } from './interfaces'\nimport { get, set, sum, CLASSIC, MIDDLE } from './utils'\nimport { Tilemap, ITilemapConfig } from './Tilemap'\n\nexport interface IIsoTilemapConfig {\n  projectionAngle?: number\n}\n\nexport class IsoTilemap<T> extends Tilemap<T> {\n\n  protected readonly transform: [number, number] = null\n  protected readonly baseOrigin: IPoint\n  protected readonly baseSurfaceHeight: number\n  protected readonly baseSurfaceHalfHeight: number\n  readonly depthMap: { [layer: number]: { [row: number]: { [col: number]: number } } } = {}\n\n  constructor({ projectionAngle = CLASSIC, ...config }: IIsoTilemapConfig & ITilemapConfig) {\n    super({ ...config })\n    this.transform = [Math.cos(projectionAngle), Math.sin(projectionAngle)];\n    this.baseOrigin = { x: this.baseTileDimensions.width * this.baseTileOrigin.x, y: this.baseTileDimensions.height * this.baseTileOrigin.y }\n    this.baseSurfaceHeight = (this.baseTileDimensions.height - this.baseTileDimensions.depth)\n    this.baseSurfaceHalfHeight = this.baseSurfaceHeight / 2\n  }\n\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    if (dimensions !== this.baseTileDimensions) {\n      let d = dimensions.depth / this.baseTileDimensions.depth\n      for (let i = d, z = point.z; i > 0; i--, z++) {\n        if (i > 1) {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth)\n        } else {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth * i)\n        }\n        set(this.map, [z, point.x, point.y], tile)\n      }\n    } else {\n      set(this.depthMap, [point.z, point.x, point.y], this.baseTileDimensions.depth)\n      set(this.map, [point.z, point.x, point.y], tile)\n    }\n    return this._project(\n      this._getAbsolutePosition(point),\n      dimensions,\n      origin,\n      sum(this.getColumn<number>(point, this.depthMap).slice(1, point.z))\n    )\n  }\n\n  public remove(point: IPoint3): T {\n    const tile = this.get(point)\n    if (!tile) return null\n    Object.entries(this.map).forEach(([z, grid]) => {\n      try {\n        if (grid[point.x][point.y] === tile) {\n          delete this.depthMap[z][point.x][point.y]\n          delete this.map[z][point.x][point.y]\n        }\n      } catch { }\n    })\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    const edge = { x: dimensions.width * origin.x, y: dimensions.width * origin.y }\n    p.x = Math.floor((p.x + edge.x) / edge.x)\n    p.y = Math.floor((p.y + edge.y) / edge.y)\n    p.z = p.z || 0\n    return p\n  }\n\n  _project(point3: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin, depth: number = 0): IPoint3 {\n    const out = {\n      x: (point3.x - point3.y) * this.transform[0],\n      y: (point3.x + point3.y) * this.transform[1],\n      z: point3.z || 0\n    }\n\n    const { width, height } = this.getGlobalDimensions()\n    out.x += width * this.worldOrigin.x\n    out.y += + height * this.worldOrigin.y\n    out.z = (point3.x + point3.y) * (point3.z + 1 || 1)\n\n    if (dimensions !== this.baseTileDimensions) {\n      out.y -= (this.baseSurfaceHalfHeight + 0) - this.baseTileOrigin.y // + (this.baseTileDimensions.depth * point3.z)) - this.baseTileOrigin.y\n      out.y += (dimensions.height * origin.y) - (dimensions.height - ((dimensions.height - dimensions.depth) / 2))\n      out.y -= depth\n    } else {\n      out.y -= (this.baseTileDimensions.depth * point3.z)\n    }\n\n    return out;\n  }\n\n  _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const worldDimensions = this.getGlobalDimensions()\n    const x = point.x - (worldDimensions.width * this.worldOrigin.x);\n    const y = point.y - (worldDimensions.height * this.worldOrigin.y);\n\n    out.x = x / (2 * this.transform[0]) + y / (2 * this.transform[1]);\n    out.y = -(x / (2 * this.transform[0])) + y / (2 * this.transform[1]);\n    out.z = point.z || 0;\n\n    return out;\n  }\n\n  _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: (dimensions.width * origin.x) * point.x, // multiply by scale\n      y: (dimensions.width * origin.y) * point.y,\n      z: point.z || 0\n    }\n  }\n}"],"names":["CLASSIC","DIRECTION","Math","atan","ISOMETRIC","PI","MILITARY","TOP_LEFT","x","y","MIDDLE","ZERO","set","obj","indices","value","o","length","n","shift","get","setIfNull","getDistance","p1","p2","sqrt","sum","numbers","reduce","s","getIsoDirection","from","to","diffX","diffY","N","NE","E","SE","S","SW","W","NW","NONE","Tilemap","worldOrigin","baseTileOrigin","baseTileDimensions","getGlobalDimensions","getWorldPosition","getWorldScale","this","add","sprite","point","dimensions","origin","tiles","push","tile","indexOf","map","z","_project","_getAbsolutePosition","getColumn","Object","entries","move","remove","splice","toPoint","scale","worldPosition","p","toTile","_unproject","round","width","height","centerToTile","centerToPoint","globalDimensions","center","centerTile","getBounds","grids","values","xes","keys","Number","flat","yes","minX","min","maxX","max","minY","rect","depth","point3","out","IsoTilemap","projectionAngle","config","_this","transform","cos","sin","baseOrigin","baseSurfaceHeight","baseSurfaceHalfHeight","i","depthMap","slice","forEach","grid","_this2","edge","floor","worldDimensions"],"mappings":"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"}