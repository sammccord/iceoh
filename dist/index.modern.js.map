{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/Tilemap.ts","../src/IsoTilemap.ts"],"sourcesContent":["import { IPoint, IPoint3 } from \"./interfaces\"\n\n/**\n * Classic 2:1 projection angle found in most isometric games\n * \n * @type {number}\n */\nexport const CLASSIC = Math.atan(0.5);\n/**\n * Isometric projection\n *\n * @type {number}\n */\nexport const ISOMETRIC = Math.PI / 6;\n/**\n * Military projection\n * \n * @type {number}\n */\nexport const MILITARY = Math.PI / 4;\n\n/**\n * Point specifying top left placement factor\n * \n * @type {IPoint}\n */\nexport const TOP_LEFT: IPoint = { x: 0, y: 0 }\n\n/**\n * Point specifying middle placement factor\n * \n * @type {IPoint}\n */\nexport const MIDDLE: IPoint = { x: 0.5, y: 0.5 }\n\n/**\n * Point specifying a factor of 1 for both axes\n * \n * @type {IPoint}\n */\nexport const FULL: IPoint = { x: 1, y: 1 }\n\n/**\n * Enum specifying compass directions, including NONE\n * \n * @type {DIRECTION}\n */\nexport enum DIRECTION {\n  NONE = 'NONE',\n  N = 'N',\n  NE = 'NE',\n  E = 'E',\n  SE = 'SE',\n  S = 'S',\n  SW = 'SW',\n  W = 'W',\n  NW = 'NW'\n}\n\n/**\n * Deeply set a value in object at given indices using objects for new path creation\n *\n * @param {object} obj - Object to deeply set\n * @param {number[]} indices - Array of keys to set\n * @param {any} value - The value to set\n * @return {any} The value set\n *\n * @example\n *\n *    const tile = set({}, [0, 1, 2], sprite)\n */\nexport function set<T>(obj: {}, indices: number[], value: T): T {\n  var o = obj\n  while (indices.length - 1) {\n    var n = indices.shift()\n    if (!(n in o)) o[n] = {}\n    o = o[n]\n  }\n  o[indices[0]] = value\n  return o[indices[0]]\n}\n\n/**\n * Deeply get a value from an object at given indicies path.\n * If `setIfNull` is provided, new objects will be used for path creation and the value will be set.\n *\n * @param {object} obj - Object to deeply get\n * @param {number[]} indices - Array of keys to get\n * @param {any} [setIfNull] - The value to set, if any\n * @return {any} The value at given indices\n *\n * @example\n *\n *    const tile = get({}, [0, 1, 2], sprite)\n */\nexport function get<T>(obj: {}, indices: number[], setIfNull?: T): T {\n  var o = obj\n  while (indices.length) {\n    var n = indices.shift()\n    if (!(n in o)) {\n      if (setIfNull) {\n        o[n] = {}\n        if (!indices.length) o[n] = setIfNull\n      }\n      else return\n    }\n    o = o[n]\n  }\n  return o as T\n}\n\n/**\n * Gets distance between two 2D Points\n *\n * @param {IPoint} from\n * @param {IPoint} to\n * @return {number} Distance\n *\n * @example\n *\n *    const tile = getDistance({ x: 5, y: 5 }, { x: 10, y: 10 })\n */\nexport function getDistance(from: IPoint, to: IPoint): number {\n  return Math.sqrt((to.x - from.x) * (to.x - from.x) + (to.y - from.y) * (to.y - from.y));\n}\n\n/**\n * Sums an array of numbers, ignoring null values\n *\n * @param {number[]} numbers\n * @return {number} sum\n *\n * @example\n *\n *    const total = sum([ 1, 10, null, 5 ])\n */\nexport function sum(numbers: number[]): number {\n  return numbers.reduce((s, n) => !!n ? s + n : s, 0)\n}\n\nconst ZERO = 0\n/**\n * Gets compass direction between two points\n *\n * @param {IPoint} from\n * @param {IPoint} to\n * @return {DIRECTION}\n *\n * @example\n *\n *    const direction = getDirection({ x: 1, y: 1 }, { x: 1: y: 0 }) // DIRECTION.N\n */\nexport function getDirection(from: IPoint3, to: IPoint3): DIRECTION {\n  let diffX = to.x - from.x, diffY = to.y - from.y\n  if (diffX === ZERO && diffY < ZERO) return DIRECTION.N\n  if (diffX > ZERO && diffY < ZERO) return DIRECTION.NE\n  if (diffX > ZERO && diffY === ZERO) return DIRECTION.E\n  if (diffX > ZERO && diffY > ZERO) return DIRECTION.SE\n  if (diffX === ZERO && diffY > ZERO) return DIRECTION.S\n  if (diffX < ZERO && diffY > ZERO) return DIRECTION.SW\n  if (diffX < ZERO && diffY === ZERO) return DIRECTION.W\n  if (diffX < ZERO && diffY < ZERO) return DIRECTION.NW\n  return DIRECTION.NONE\n}\n","import { IPoint3, IPoint, IRectangle, IRectangle3, IBox } from './interfaces'\nimport { get, set, MIDDLE, FULL, TOP_LEFT } from './utils'\n\n/**\n * Tilemap configuration\n */\nexport interface ITilemapConfig {\n  /** The screen offset for the 0,0 coordinate, deaults to `MIDDLE` */\n  worldOrigin?: IPoint\n  /** The anchor point at which tiles are expected to be drawn to screen, defaults to `MIDDLE` */\n  baseTileOrigin?: IPoint\n  /**\n   * The base dimensions of tiles that comprise the map.\n   * In 2D Tilemaps this would ideally be squares, `{ x: 32, y: 32 }`.\n   * Isometric tilemaps expect a depth field to correctly place tiles at z > 0\n   */\n  baseTileDimensions: IRectangle3\n  /** A getter function that retuns the dimensions of the canvas */\n  getGlobalDimensions: () => IRectangle\n  /** A getter function that returns the world offset, this defaults to `() => { x: 0, y: 0 }` */\n  getWorldPosition?: () => IPoint\n  /** A getter function that returns the world scale, this defaults to `() => { x: 1, y: 1 }` */\n  getWorldScale?: () => IPoint\n}\n\nexport class Tilemap<T> {\n  protected getGlobalDimensions: () => IRectangle\n  protected getWorldPosition: () => IPoint\n  protected getWorldScale: () => IPoint\n  protected baseTileDimensions: IRectangle3\n\n  protected readonly worldOrigin: IPoint = MIDDLE\n  protected readonly baseTileOrigin: IPoint = MIDDLE\n  protected readonly tiles: T[] = []\n  protected readonly map: { [z: number]: { [x: number]: { [y: number]: T } } } = {}\n\n  /**\n  * Create a `Tilemap<T>` instance.\n  * @param {ITilemapConfig} config\n  */\n  constructor({ worldOrigin, baseTileOrigin, baseTileDimensions, getGlobalDimensions, getWorldPosition, getWorldScale }: ITilemapConfig) {\n    this.worldOrigin = worldOrigin || MIDDLE\n    this.baseTileOrigin = baseTileOrigin || MIDDLE\n    this.baseTileDimensions = baseTileDimensions\n    this.getGlobalDimensions = getGlobalDimensions\n    this.getWorldPosition = getWorldPosition || (() => TOP_LEFT)\n    this.getWorldScale = getWorldScale || (() => FULL)\n  }\n\n  /**\n  * Add tile to the tilemap at given coordinate.\n  * @param {T} tile\n  * @param {IPoint3} point - The map coordinates at which to store this tile\n  * @param {IRectangle3=} dimensions - The dimensions of the tile tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile\n  * @return {IPoint3} A point at which to place this tile in screen space\n  *\n  * @example\n  *\n  *    const position = isoTilemap.add({}, { x: 1, y: 1, z: 0 })\n  */\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    set(this.map, [point.z, point.x, point.y], tile)\n    return this._project(this._getAbsolutePosition(point), dimensions, origin)\n  }\n\n  /**\n * Get a tile at given map coordinates\n *\n * @param {IPoint3} point - Tile to get at given coordinates. If no z is provided, it defaults to 0.\n * @return {T} The tile at given coordinates\n *\n * @example\n *\n *    const tile = tilemap.get({ x: 1, y: 1, z: 1 })\n */\n  public get(point: IPoint3): T {\n    return get(this.map, [point.z || 0, point.x, point.y])\n  }\n\n  /**\n  * Get an array of values from a map at given x,y coordinates.\n  *\n  * @param {IPoint} point - Map coordinates to get at each z-layer\n  * @param {object=} map - Object to search against, defaults to `this.map`, but will also work if called with `this.depthMap`, in which case numerical tile depths are returned.\n  * @return {T[]} Array of values at given x,y coordinates. If the map is multiple z-layers deep, but the tile x,y coordinate doesn't exist in all layers, the returned array will contain null entries.\n  *\n  * @example\n  *\n  *    const tiles = tilemap.getColumn({ x: 1, y: 1 })\n  *    const depths = tilemap.getColumn({ x: 1, y: ! }, tilemap.depthMap)\n  */\n  public getColumn<C>(point: IPoint, map?: {}): C[] {\n    return Object.entries(map || this.map).map(([_, grid]) => get(grid, [point.x, point.y]))\n  }\n\n  /**\n  * Moves a tile from given coordinate to another coordinate\n  * @param {IPoint3} from - The map coordinates of the tile to move\n  * @param {IPoint3} to - The map coordinates to move the tile to\n  * @param {IRectangle3=} dimensions - The dimensions of the tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile, defaults to `this.baseTileOrigin`\n  * @return {IPoint3} A point at which to place this tile in screen space\n  *\n  * @example\n  *\n  *    const position = tilemap.move({ x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 0 })\n  */\n  public move(from: IPoint3, to: IPoint3, dimensions: IRectangle = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const tile = this.remove(from)\n    if (!tile) return null\n    return this.add(tile, to, dimensions, origin)\n  }\n\n  /**\n  * Remove a tile from the given point coordinates.\n  *\n  * @param {IPoint3} point - Map coordinates to remove\n  * @return {[T]} The removed tile if found\n  *\n  * @example\n  *\n  *    const tile = tilemap.remove({ x: 1, y: 1 })\n  */\n  public remove(point: IPoint3): T {\n    const tile = this.get(point)\n    if (!tile) return null\n    delete this.map[point.z][point.x][point.y]\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  /**\n  * Project a tile coordinate to screen space coordinate\n  * @param {IPoint3} point - The tile coordinates\n  * @param {IRectangle3=} dimensions - The dimensions of the tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile, defaults to `this.baseTileOrigin`\n  * @return {IPoint3} Screen space point\n  *\n  * @example\n  *\n  *    const position = tilemap.toPoint({ x: 1, y: 1, z: 0 })\n  */\n  public toPoint(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const scale = this.getWorldScale()\n    const worldPosition = this.getWorldPosition()\n    const p = this._project(this._getAbsolutePosition(point, dimensions, origin))\n    p.x += p.x * (scale.x - 1) + worldPosition.x\n    p.y += p.y * (scale.y - 1) + worldPosition.y\n    return p\n  }\n\n  /**\n  * Project a screen point to tile point\n  * @param {IPoint3} point - The screen coordinates to project\n  * @param {IRectangle3=} dimensions - The dimensions of each tile on the map, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile\n  * @return {IPoint3} The tile coordinate in the map\n  *\n  * @example\n  *\n  *    const tilePosition = tileMap.toTile({ x: 400, y: 300 })\n  */\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    return {\n      x: Math.round(p.x / dimensions.width),\n      y: Math.round(p.y / dimensions.height),\n      z: point.z || 0\n    }\n  }\n\n  /**\n  * Returns the new position of the tiles' parent container where the given tile is in the center of the viewport.\n  * @param {IPoint3} point - The map coordinates to center\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const worldPosition = tilemap.centerToTile({ x: 1, y: 1, z: 0 })\n  */\n  public centerToTile(point: IPoint3): IPoint {\n    return this.centerToPoint(this.toPoint(point))\n  }\n\n  /**\n  * Returns the new position of the tiles' parent container where the given screen point is in the center of the viewport.\n  * @param {IPoint3} point - The screen coordinates to center\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const worldPosition = tilemap.centerToPoint({ x: 500, y: 200 })\n  */\n  public centerToPoint(point: IPoint): IPoint {\n    const globalDimensions = this.getGlobalDimensions()\n    const worldPosition = this.getWorldPosition()\n    return {\n      x: worldPosition.x + (globalDimensions.width / 2) - point.x,\n      y: worldPosition.y + (globalDimensions.height / 2) - point.y\n    }\n  }\n\n  /**\n  * Calculates the current map bounds and returns the tile coordinates in the center\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const { x, y } = tilemap.centerTile\n  */\n  public get centerTile(): IPoint {\n    return this.getBounds()\n  }\n\n  /**\n  * Calls `tilemap.centerToTile(this.centerTile)` and returns the new position of the tiles' parent container where the center tile is in the center of the viewport.\n  * @return {IPoint}\n  *\n  * @example\n  *\n  *    const { x, y } = tilemap.center()\n  */\n  public center(): IPoint {\n    return this.centerToTile(this.centerTile)\n  }\n\n  /**\n  * Calculates the map bounds of the current tilemap.\n  * @return {IBox}\n  *\n  * @example\n  *\n  *    const { x, y, width, height, depth } = tilemap.getBounds()\n  */\n  public getBounds(): IBox {\n    const grids = Object.values(this.map)\n    const xes = grids.map(o => Object.keys(o).map(Number)).flat()\n    const yes = grids.map(Object.values).flat().map(o => Object.keys(o).map(Number)).flat()\n\n    const minX = Math.min(...xes), maxX = Math.max(...xes), minY = Math.min(...yes), maxY = Math.max(...yes)\n\n    const rect = {\n      x: 0,\n      y: 0,\n      width: maxX - minY,\n      height: maxY - minY,\n      depth: grids.length\n    }\n\n    rect.x = Math.round(minX + (rect.width / 2))\n    rect.y = Math.round(minY + (rect.height / 2))\n\n    return rect\n  }\n\n  protected _project(point3: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const { width, height } = this.getGlobalDimensions();\n    return {\n      x: point3.x + (width * this.worldOrigin.x),\n      y: point3.y + (height * this.worldOrigin.y),\n      z: point3.z || 0\n    };\n  }\n\n  protected _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const { width, height } = this.getGlobalDimensions()\n    out.x = point.x - (width * this.worldOrigin.x);\n    out.y = point.y - (height * this.worldOrigin.y) + (point.z || 0);\n    out.z = point.z\n    return out;\n  }\n\n  protected _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: this.baseTileDimensions.width * point.x,\n      y: this.baseTileDimensions.height * point.y,\n      z: point.z\n    }\n  }\n}","import { IPoint3, IPoint, IRectangle3 } from './interfaces'\nimport { set, sum, CLASSIC } from './utils'\nimport { Tilemap, ITilemapConfig } from './Tilemap'\n\n/**\n * Object extending `ITilemapConfig` with optional projectionAngle, defaulting to `CLASSIC`\n */\nexport interface IIsoTilemapConfig extends ITilemapConfig {\n  /** Isometric projection angle, defaults to `CLASSIC` */\n  angle?: number\n  /**\n   * It's a good idea to clamp your values to aid performance. In general having values aligned around the 0.5 value will produce a well performing and visually appealing display.\n   */\n  clamp?: boolean\n}\n\n/**\n * Class that extends basic 2D Tilemap functionality based on given projectionAngle.\n * @param {T} - The type of sprite object to store\n * @extends Tilemap\n */\nexport class IsoTilemap<T> extends Tilemap<T> {\n\n  protected readonly angle: number;\n  protected readonly angleCos: number;\n  protected readonly angleSin: number\n  protected readonly clamp: boolean\n\n  protected readonly baseOrigin: IPoint\n  protected readonly baseSurfaceHeight: number\n  protected readonly baseSurfaceHalfHeight: number\n  readonly depthMap: { [z: number]: { [x: number]: { [y: number]: number } } } = {}\n\n  /**\n  * Create an `IsoTilemap<T>` instance.\n  * @param {IIsoTilemapConfig} config - projectionAngle will default to CLASSIC\n  */\n  constructor({ angle = CLASSIC, clamp = true, ...config }: IIsoTilemapConfig) {\n    super({ ...config })\n    this.angle = angle;\n    this.angleCos = Math.cos(this.angle);\n    this.angleSin = Math.sin(this.angle);\n    this.clamp = clamp\n    this.baseOrigin = { x: this.baseTileDimensions.width * this.baseTileOrigin.x, y: this.baseTileDimensions.height * this.baseTileOrigin.y }\n    this.baseSurfaceHeight = (this.baseTileDimensions.height - this.baseTileDimensions.depth)\n    this.baseSurfaceHalfHeight = this.baseSurfaceHeight / 2\n  }\n\n  /**\n  * Add tile to the tilemap at given coordinate.\n  * If given tile is tall enough to occupy multiple z-layers at the base tile depth, it will add a reference at those z-layers in the map.\n  * @param {T} tile\n  * @param {IPoint3} point - The map coordinates at which to store this tile\n  * @param {IRectangle3=} dimensions - The dimensions of the tile, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile, defaults to `this.baseTileOrigin`\n  * @return {IPoint3} A 3D Point at which to place this tile in screen space\n  *\n  * @example\n  *\n  *    const position = isoTilemap.add({}, { x: 1, y: 1, z: 0 })\n  */\n  public add(sprite: T, point: IPoint3, dimensions: IRectangle3 = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    this.tiles.push(sprite)\n    const tile = this.tiles[this.tiles.indexOf(sprite)]\n    if (dimensions !== this.baseTileDimensions) {\n      let d = dimensions.depth / this.baseTileDimensions.depth\n      for (let i = d, z = point.z; i > 0; i--, z++) {\n        if (i > 1) {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth)\n        } else {\n          set(this.depthMap, [z, point.x, point.y], this.baseTileDimensions.depth * i)\n        }\n        set(this.map, [z, point.x, point.y], tile)\n      }\n    } else {\n      set(this.depthMap, [point.z, point.x, point.y], this.baseTileDimensions.depth)\n      set(this.map, [point.z, point.x, point.y], tile)\n    }\n    return this._project(\n      this._getAbsolutePosition(point),\n      dimensions,\n      origin,\n      sum(this.getColumn<number>(point, this.depthMap).slice(1, point.z))\n    )\n  }\n\n  /**\n  * Remove a tile from the given point coordinates.\n  * If the tile exists at multiple z-layers, it'll remove references to the tile at those layers as well.\n  * @param {IPoint3} point - The map coordinates from which to remove a tile\n  * @return {[T]} The tile that existed at the given point, or null if there was no tile.\n  *\n  * @example\n  *\n  *    const removedTile = isoTilemap.remove({ x: 1, y: 1, z: 0 })\n  */\n  public remove(point: IPoint3): T {\n    const tile = this.get(point)\n    if (!tile) return null\n    Object.entries(this.map).forEach(([z, grid]) => {\n      try {\n        if (grid[point.x][point.y] === tile) {\n          delete this.depthMap[z][point.x][point.y]\n          delete this.map[z][point.x][point.y]\n        }\n      } catch { }\n    })\n    return this.tiles.splice(this.tiles.indexOf(tile), 1)[0]\n  }\n\n  /**\n  * Project a screen point to tile point\n  * @param {IPoint3} point - The screen coordinates to project\n  * @param {IRectangle3=} dimensions - The dimensions of each tile on the map, defaults to `this.baseTileDimensions`\n  * @param {IPoint=} origin - The origin point of the tile\n  * @return {IPoint3} The tile coordinate in the map\n  *\n  * @example\n  *\n  *    const tilePosition = isoTilemap.toTile({ x: 400, y: 300 })\n  */\n  public toTile(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    const p = this._unproject(point)\n    const edge = { x: dimensions.width * origin.x, y: dimensions.width * origin.y }\n    p.x = Math.floor((p.x + edge.x) / edge.x)\n    p.y = Math.floor((p.y + edge.y) / edge.y)\n    p.z = p.z || 0\n    return p\n  }\n\n  protected _project(p: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin, depth: number = 0): IPoint3 {\n    // calculate the cartesion coordinates\n    const { width, height } = this.getGlobalDimensions()\n    const out = {\n      x: ((p.x - p.y) * this.angleCos) + (width * this.worldOrigin.x),\n      y: ((p.x + p.y) * this.angleSin) + (height * this.worldOrigin.y),\n      z: (p.x + p.y) * (p.z + 1 || 1)\n    }\n    if (dimensions !== this.baseTileDimensions) {\n      out.y -= (this.baseSurfaceHalfHeight + 0) - this.baseTileOrigin.y // + (this.baseTileDimensions.depth * point3.z)) - this.baseTileOrigin.y\n      out.y += (dimensions.height * origin.y) - (dimensions.height - ((dimensions.height - dimensions.depth) / 2))\n      out.y -= depth\n    } else {\n      out.y -= (this.baseTileDimensions.depth * p.z)\n    }\n    // if we are clamping, then clamp the values\n    // clamp using the fastest proper rounding: http://jsperf.com/math-round-vs-hack/3\n    if (this.clamp) {\n      out.x = ~~(out.x + (out.x > 0 ? 0.5 : -0.5))\n      out.y = ~~(out.y + (out.y > 0 ? 0.5 : -0.5))\n    }\n    return out\n  }\n\n  protected _unproject(point: IPoint3, out: IPoint3 = { x: 0, y: 0, z: 0 }) {\n    const worldDimensions = this.getGlobalDimensions()\n    const x = point.x - (worldDimensions.width * this.worldOrigin.x);\n    const y = point.y - (worldDimensions.height * this.worldOrigin.y);\n\n    out.x = x / (2 * this.angleCos) + y / (2 * this.angleSin);\n    out.y = -(x / (2 * this.angleCos)) + y / (2 * this.angleSin);\n    out.z = point.z || 0;\n\n    return out;\n  }\n\n  protected _getAbsolutePosition(point: IPoint3, dimensions = this.baseTileDimensions, origin = this.baseTileOrigin): IPoint3 {\n    return {\n      x: (dimensions.width * origin.x) * point.x,\n      y: (dimensions.width * origin.y) * point.y,\n      z: point.z || 0\n    }\n  }\n}"],"names":["CLASSIC","Math","atan","ISOMETRIC","PI","MILITARY","TOP_LEFT","x","y","MIDDLE","FULL","DIRECTION","set","obj","indices","value","o","length","n","shift","get","setIfNull","getDistance","from","to","sqrt","sum","numbers","reduce","s","getDirection","diffX","diffY","N","NE","E","SE","S","SW","W","NW","NONE","Tilemap","constructor","worldOrigin","baseTileOrigin","baseTileDimensions","getGlobalDimensions","getWorldPosition","getWorldScale","tiles","map","this","add","sprite","point","dimensions","origin","push","tile","indexOf","z","_project","_getAbsolutePosition","getColumn","Object","entries","_","grid","move","remove","splice","toPoint","scale","worldPosition","p","toTile","_unproject","round","width","height","centerToTile","centerToPoint","globalDimensions","centerTile","getBounds","center","grids","values","xes","keys","Number","flat","yes","minX","min","maxX","max","minY","rect","depth","point3","out","IsoTilemap","angle","clamp","super","angleCos","angleSin","baseOrigin","baseSurfaceHeight","baseSurfaceHalfHeight","depthMap","cos","sin","i","slice","forEach","edge","floor","worldDimensions"],"mappings":"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"}